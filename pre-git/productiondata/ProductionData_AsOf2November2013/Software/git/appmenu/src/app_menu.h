/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -i dbusmenutypes_p.h -p app_menu /home/kyan/git/appmenu/src/com.canonical.AppMenu.Registrar.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef APP_MENU_H_1347313607
#define APP_MENU_H_1347313607

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "dbusmenutypes_p.h"

/*
 * Proxy class for interface com.canonical.AppMenu.Registrar
 */
class ComCanonicalAppMenuRegistrarInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.canonical.AppMenu.Registrar"; }

public:
    ComCanonicalAppMenuRegistrarInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComCanonicalAppMenuRegistrarInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString, QDBusObjectPath> GetMenuForWindow(uint windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(windowId);
        return asyncCallWithArgumentList(QLatin1String("GetMenuForWindow"), argumentList);
    }
    inline QDBusReply<QString> GetMenuForWindow(uint windowId, QDBusObjectPath &menuObjectPath)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(windowId);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("GetMenuForWindow"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            menuObjectPath = qdbus_cast<QDBusObjectPath>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<MenuInfoList> GetMenus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetMenus"), argumentList);
    }

    inline QDBusPendingReply<> RegisterWindow(uint windowId, const QDBusObjectPath &menuObjectPath)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(windowId) << qVariantFromValue(menuObjectPath);
        return asyncCallWithArgumentList(QLatin1String("RegisterWindow"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterWindow(uint windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(windowId);
        return asyncCallWithArgumentList(QLatin1String("UnregisterWindow"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void WindowRegistered(uint windowId, const QString &service, const QDBusObjectPath &menuObjectPath);
    void WindowUnregistered(uint windowId);
};

namespace com {
  namespace canonical {
    namespace AppMenu {
      typedef ::ComCanonicalAppMenuRegistrarInterface Registrar;
    }
  }
}
#endif
