/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -i dbusmenutypes_p.h -p dbus_menu /media/MyBook/appmenu/src/com.canonical.dbusmenu.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUS_MENU_H_1352359185
#define DBUS_MENU_H_1352359185

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "dbusmenutypes_p.h"

/*
 * Proxy class for interface com.canonical.dbusmenu
 */
class ComCanonicalDbusmenuInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.canonical.dbusmenu"; }

public:
    ComCanonicalDbusmenuInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComCanonicalDbusmenuInterface();

    Q_PROPERTY(QString Status READ status)
    inline QString status() const
    { return qvariant_cast< QString >(property("Status")); }

    Q_PROPERTY(uint Version READ version)
    inline uint version() const
    { return qvariant_cast< uint >(property("Version")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> AboutToShow(int id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id);
        return asyncCallWithArgumentList(QLatin1String("AboutToShow"), argumentList);
    }

    inline QDBusPendingReply<> Event(int id, const QString &eventId, const QDBusVariant &data, uint timestamp)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(eventId) << qVariantFromValue(data) << qVariantFromValue(timestamp);
        return asyncCallWithArgumentList(QLatin1String("Event"), argumentList);
    }

    inline QDBusPendingReply<DBusMenuItemList> GetGroupProperties(const QList<int> &ids, const QStringList &propertyNames)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(ids) << qVariantFromValue(propertyNames);
        return asyncCallWithArgumentList(QLatin1String("GetGroupProperties"), argumentList);
    }

    inline QDBusPendingReply<uint, DBusMenuLayoutItem> GetLayout(int parentId, int recursionDepth, const QStringList &propertyNames)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(parentId) << qVariantFromValue(recursionDepth) << qVariantFromValue(propertyNames);
        return asyncCallWithArgumentList(QLatin1String("GetLayout"), argumentList);
    }
    inline QDBusReply<uint> GetLayout(int parentId, int recursionDepth, const QStringList &propertyNames, DBusMenuLayoutItem &layout)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(parentId) << qVariantFromValue(recursionDepth) << qVariantFromValue(propertyNames);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("GetLayout"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            layout = qdbus_cast<DBusMenuLayoutItem>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QDBusVariant> GetProperty(int id, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(name);
        return asyncCallWithArgumentList(QLatin1String("GetProperty"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ItemActivationRequested(int id, uint timestamp);
    void ItemsPropertiesUpdated(DBusMenuItemList updatedProps, DBusMenuItemKeysList removedProps);
    void LayoutUpdated(uint revision, int parent);
};

namespace com {
  namespace canonical {
    typedef ::ComCanonicalDbusmenuInterface dbusmenu;
  }
}
#endif
