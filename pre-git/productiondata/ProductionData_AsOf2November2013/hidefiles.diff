Index: src/views/dolphincolumnview.cpp
===================================================================
--- src/views/dolphincolumnview.cpp	(revision 1156733)
+++ src/views/dolphincolumnview.cpp	(working copy)
@@ -48,6 +48,7 @@
 #include <QPainter>
 #include <QPoint>
 #include <QScrollBar>
+#include <qstringlist.h>
 
 DolphinColumnView::DolphinColumnView(QWidget* parent,
                                      DolphinColumnViewContainer* container,
@@ -105,8 +106,11 @@
     m_dirLister->setAutoUpdate(true);
     m_dirLister->setMainWindow(window());
     m_dirLister->setDelayedMimeTypes(true);
-    const bool showHiddenFiles = m_container->m_dolphinViewController->view()->showHiddenFiles();
+    const bool showHiddenFiles = 
+            m_container->m_dolphinViewController->view()->showHiddenFiles();
     m_dirLister->setShowingDotFiles(showHiddenFiles);
+    m_dirLister->setHiddenList(QStringList::QStringList(
+            m_container->m_dolphinViewController->view()->hiddenList()));
 
     m_dolphinModel = new DolphinModel(this);
     m_dolphinModel->setDirLister(m_dirLister);
Index: src/views/dolphindirlister.cpp
===================================================================
--- src/views/dolphindirlister.cpp	(revision 1156733)
+++ src/views/dolphindirlister.cpp	(working copy)
@@ -25,6 +25,7 @@
     KDirLister()
 {
     setAutoErrorHandlingEnabled(false, 0);
+    hiddenlist = QStringList::QStringList();
 }
 
 DolphinDirLister::~DolphinDirLister()
@@ -45,4 +46,27 @@
     }
 }
 
+void DolphinDirLister::setHiddenList(const QStringList& list)
+{
+    hiddenlist = QStringList::QStringList(list);
+}
+
+QStringList DolphinDirLister::hiddenList()
+{
+    return QStringList::QStringList(hiddenlist);
+}
+
+bool DolphinDirLister::matchesFilter(const KFileItem& item) const
+{
+    if (!showingDotFiles()) {
+        QStringList thelist = QStringList::QStringList(hiddenlist);
+        for (QStringList::Iterator it = thelist.begin(); it != thelist.end(); ++it) {
+            if (*it == item.text()) {
+                return false;
+            }
+        }
+    }
+    return KDirLister::matchesFilter(item);
+}
+
 #include "dolphindirlister.moc"
Index: src/views/viewproperties.h
===================================================================
--- src/views/viewproperties.h	(revision 1156733)
+++ src/views/viewproperties.h	(working copy)
@@ -23,6 +23,7 @@
 
 #include <views/dolphinview.h>
 #include <kurl.h>
+#include <qstringlist.h>
 #include <libdolphin_export.h>
 
 class ViewPropertySettings;
@@ -62,6 +63,8 @@
     void setShowHiddenFiles(bool show);
     bool showHiddenFiles() const;
 
+    QStringList hiddenList() const;
+
     void setCategorizedSorting(bool categorized);
     bool categorizedSorting() const;
 
@@ -157,6 +160,7 @@
     bool m_changedProps;
     bool m_autoSave;
     QString m_filePath;
+	QStringList m_hiddenList;
     ViewPropertySettings* m_node;
 };
 
Index: src/views/dolphinview.h
===================================================================
--- src/views/dolphinview.h	(revision 1156733)
+++ src/views/dolphinview.h	(working copy)
@@ -25,6 +25,7 @@
 #include <config-nepomuk.h>
 
 #include "libdolphin_export.h"
+#include "dolphindirlister.h"
 
 #include <kparts/part.h>
 #include <kfileitem.h>
@@ -38,18 +39,19 @@
 #include <QListView>
 #include <QSet>
 #include <QWidget>
+#include <qstringlist.h>
 
 typedef KIO::FileUndoManager::CommandType CommandType;
 
 class DolphinColumnViewContainer;
 class DolphinDetailsView;
+class DolphinDirLister;
 class DolphinIconsView;
 class DolphinModel;
 class DolphinSortFilterProxyModel;
 class DolphinViewController;
 class KAction;
 class KActionCollection;
-class KDirLister;
 class KUrl;
 class ViewModeController;
 class ViewProperties;
@@ -168,6 +170,9 @@
 
     /** See setShowHiddenFiles */
     bool showHiddenFiles() const;
+    
+    /** returns the list of specifically hidden files in the current folder */
+    QStringList hiddenList() const;
 
     /** See setCategorizedSorting */
     bool categorizedSorting() const;
@@ -767,7 +772,7 @@
 
         DolphinModel* dirModel() const;
         DolphinSortFilterProxyModel* proxyModel() const;
-        KDirLister* dirLister() const;
+        DolphinDirLister* dirLister() const;
 
     private:
         DolphinIconsView* m_iconsView;
Index: src/views/dolphindirlister.h
===================================================================
--- src/views/dolphindirlister.h	(revision 1156733)
+++ src/views/dolphindirlister.h	(working copy)
@@ -21,6 +21,7 @@
 #define DOLPHINDIRLISTER_H
 
 #include <kdirlister.h>
+#include <qstringlist.h>
 
 /**
  * @brief Extends the class KDirLister by emitting a signal when an
@@ -33,6 +34,8 @@
 public:
     DolphinDirLister();
     virtual ~DolphinDirLister();
+    virtual void setHiddenList(const QStringList& list);
+    virtual QStringList hiddenList();
 
 signals:
     /** Is emitted whenever an error has occurred. */
@@ -43,6 +46,10 @@
 
 protected:
     virtual void handleError(KIO::Job* job);
+    virtual bool matchesFilter(const KFileItem& item) const;
+
+private:
+    QStringList hiddenlist;
 };
 
 #endif
Index: src/views/viewproperties.cpp
===================================================================
--- src/views/viewproperties.cpp	(revision 1156733)
+++ src/views/viewproperties.cpp	(working copy)
@@ -32,6 +32,8 @@
 #include <QDate>
 #include <QFile>
 #include <QFileInfo>
+#include <QRegExp>
+#include <QtDebug>
 
 #include "settings/dolphinsettings.h"
 
@@ -58,6 +60,19 @@
     }
 
     const QString file = m_filePath + QDir::separator() + QLatin1String(".directory");
+    const QString hiddenfile = m_filePath + QDir::separator() + QLatin1String(".hidden");
+    QFile thefile(hiddenfile);
+    m_hiddenList = QStringList::QStringList();
+    if (thefile.open(QIODevice::ReadOnly | QIODevice::Text)) {
+        while (!thefile.atEnd()) {
+            QString string = thefile.readLine();
+            QRegExp re("^(.+)\n$");
+            if (re.indexIn(string) >= 0) {
+                m_hiddenList.append(re.cap(1));
+            }
+        }
+        thefile.close();
+    }
     m_node = new ViewPropertySettings(KSharedConfig::openConfig(file));
 
     const bool useDefaultProps = !useGlobalViewProps &&
@@ -74,6 +89,12 @@
 
         settings->setGlobalViewProps(false);
         m_changedProps = false;
+    } else {
+        QStringList directoryList = QStringList::QStringList(m_node->hideSpecificFiles());
+        for (QStringList::Iterator it = directoryList.begin();
+                it != directoryList.end(); ++it) {
+            m_hiddenList.append(*it);
+        }
     }
 }
 
@@ -139,6 +160,11 @@
     return m_node->showHiddenFiles();
 }
 
+QStringList ViewProperties::hiddenList() const
+{
+    return QStringList::QStringList(m_hiddenList);
+}
+
 void ViewProperties::setSorting(DolphinView::Sorting sorting)
 {
     if (m_node->sorting() != sorting) {
Index: src/views/dolphinview.cpp
===================================================================
--- src/views/dolphinview.cpp	(revision 1156733)
+++ src/views/dolphinview.cpp	(working copy)
@@ -54,6 +54,7 @@
 #include "dolphincolumnviewcontainer.h"
 #include "dolphinviewcontroller.h"
 #include "dolphindetailsview.h"
+#include "dolphindirlister.h"
 #include "dolphinfileitemdelegate.h"
 #include "dolphinnewmenuobserver.h"
 #include "dolphinsortfilterproxymodel.h"
@@ -139,7 +140,7 @@
     connect(m_dolphinViewController, SIGNAL(urlChangeRequested(KUrl)),
             m_viewModeController, SLOT(setUrl(KUrl)));
 
-    KDirLister* dirLister = m_viewAccessor.dirLister();
+    DolphinDirLister* dirLister = m_viewAccessor.dirLister();
     connect(dirLister, SIGNAL(redirection(KUrl,KUrl)),
             this, SLOT(slotRedirection(KUrl,KUrl)));
     connect(dirLister, SIGNAL(completed()),
@@ -274,6 +275,11 @@
     return m_viewAccessor.dirLister()->showingDotFiles();
 }
 
+QStringList DolphinView::hiddenList() const
+{
+    return m_viewAccessor.dirLister()->hiddenList();
+}
+
 bool DolphinView::categorizedSorting() const
 {
     // If all view modes would support categorized sorting, returning
@@ -1184,7 +1190,7 @@
         return;
     }
 
-    KDirLister* dirLister = m_viewAccessor.dirLister();
+    DolphinDirLister* dirLister = m_viewAccessor.dirLister();
     dirLister->openUrl(url, reload ? KDirLister::Reload : KDirLister::NoFlags);
 }
 
@@ -1218,6 +1224,8 @@
         emit showHiddenFilesChanged();
     }
 
+    m_viewAccessor.dirLister()->setHiddenList(props.hiddenList());
+
     m_storedCategorizedSorting = props.categorizedSorting();
     const bool categorized = m_storedCategorizedSorting && supportsCategorizedSorting();
     if (categorized != m_viewAccessor.proxyModel()->isCategorizedModel()) {
@@ -1539,9 +1547,10 @@
     return m_proxyModel;
 }
 
-KDirLister* DolphinView::ViewAccessor::dirLister() const
+DolphinDirLister* DolphinView::ViewAccessor::dirLister() const
 {
-    return dirModel()->dirLister();
+    return static_cast<DolphinDirLister*>(dirModel()->dirLister());
+    /* may need new DolphinDirLister(dirModel()->dirLister()) */
 }
 
 void DolphinView::slotRedirection(const KUrl& oldUrl, const KUrl& newUrl)
Index: src/settings/dolphin_directoryviewpropertysettings.kcfg
===================================================================
--- src/settings/dolphin_directoryviewpropertysettings.kcfg	(revision 1156733)
+++ src/settings/dolphin_directoryviewpropertysettings.kcfg	(working copy)
@@ -12,6 +12,10 @@
             <whatsthis context="@info:whatsthis">When this option is enabled hidden files, such as those starting with a '.', will be shown in the file view.</whatsthis>
             <default>false</default>
         </entry>
+        <entry name="HideSpecificFiles" type="StringList" >
+            <label context="@label">Hide specific files</label>
+            <whatsthis context="@info:whatsthis">When files are listed here they'll be hidden from view normally</whatsthis>
+        </entry>
     </group>
 
     <group name="Dolphin">
